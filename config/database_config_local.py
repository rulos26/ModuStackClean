#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Configuraci√≥n de Base de Datos Local - ModuStackClean
Configuraci√≥n para desarrollo con MySQL local
"""

import mysql.connector
from mysql.connector import Error
import json
from datetime import datetime
import socket

class DatabaseConfigLocal:
    """Configuraci√≥n de la base de datos MySQL local para desarrollo"""
    
    def __init__(self):
        # Configuraci√≥n para MySQL local (XAMPP)
        self.DB_CONFIG = {
            'host': 'localhost',
            'database': 'modustackclean',
            'user': 'root',
            'password': '',  # Sin contrase√±a por defecto en XAMPP
            'charset': 'utf8mb4',
            'collation': 'utf8mb4_unicode_ci',
            'autocommit': True,
            'pool_name': 'modustackclean_local_pool',
            'pool_size': 5,
            'connect_timeout': 10,
            'use_unicode': True,
            'get_warnings': True
        }
        
        # Configuraci√≥n de la API
        self.API_BASE_URL = "http://localhost:8000/api"
        self.API_ENDPOINTS = {
            'usuarios': '/usuarios',
            'login': '/auth/login',
            'register': '/auth/register',
            'test': '/test'
        }
    
    def test_network_connection(self):
        """Probar conectividad de red al servidor MySQL local"""
        try:
            print(f"üîç Probando conectividad a {self.DB_CONFIG['host']}:3306...")
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(5)
            result = sock.connect_ex((self.DB_CONFIG['host'], 3306))
            sock.close()
            
            if result == 0:
                print("‚úÖ Puerto 3306 est√° abierto y accesible")
                return True
            else:
                print("‚ùå Puerto 3306 no est√° accesible")
                print("üí° Aseg√∫rate de que XAMPP est√© ejecut√°ndose y MySQL est√© activo")
                return False
        except Exception as e:
            print(f"‚ùå Error probando conectividad: {e}")
            return False
    
    def get_connection(self):
        """Obtener conexi√≥n a la base de datos local"""
        try:
            print(f"üîó Intentando conectar a MySQL local en {self.DB_CONFIG['host']}...")
            connection = mysql.connector.connect(**self.DB_CONFIG)
            if connection.is_connected():
                print("‚úÖ Conexi√≥n a MySQL local establecida correctamente")
                # Seleccionar la base de datos
                cursor = connection.cursor()
                cursor.execute("USE modustackclean")
                cursor.close()
                return connection
        except Error as e:
            print(f"‚ùå Error conectando a MySQL local: {e}")
            
            # Proporcionar sugerencias de soluci√≥n para local
            if "Can't connect to MySQL server" in str(e):
                print("\nüí° Sugerencias para solucionar el problema:")
                print("1. Verifica que XAMPP est√© ejecut√°ndose")
                print("2. Verifica que el servicio MySQL est√© activo en XAMPP")
                print("3. Verifica que el puerto 3306 est√© disponible")
                print("4. Verifica que no haya otro MySQL ejecut√°ndose")
                print("5. Reinicia el servicio MySQL en XAMPP")
            elif "Access denied" in str(e):
                print("\nüí° Sugerencias para solucionar el problema:")
                print("1. Verifica que el usuario 'root' no tenga contrase√±a")
                print("2. O configura la contrase√±a correcta en la configuraci√≥n")
                print("3. Verifica los permisos del usuario en phpMyAdmin")
            elif "Unknown database" in str(e):
                print("\nüí° Sugerencias para solucionar el problema:")
                print("1. Crea la base de datos 'modustackclean' en phpMyAdmin")
                print("2. O ejecuta el script de creaci√≥n de base de datos")
            
            return None
    
    def test_connection(self):
        """Probar la conexi√≥n a la base de datos local"""
        try:
            # Primero probar conectividad de red
            if not self.test_network_connection():
                print("‚ö†Ô∏è Problema de conectividad de red detectado")
                print("üí° Verifica que XAMPP est√© ejecut√°ndose")
                return False
            
            connection = self.get_connection()
            if connection:
                cursor = connection.cursor()
                cursor.execute("SELECT VERSION()")
                version = cursor.fetchone()
                print(f"‚úÖ Conexi√≥n exitosa. Versi√≥n de MySQL: {version[0]}")
                
                # Verificar si la tabla usuarios existe
                cursor.execute("SHOW TABLES LIKE 'usuarios'")
                table_exists = cursor.fetchone()
                if table_exists:
                    print("‚úÖ Tabla 'usuarios' encontrada")
                else:
                    print("‚ö†Ô∏è Tabla 'usuarios' no encontrada")
                
                cursor.close()
                connection.close()
                return True
            return False
        except Error as e:
            print(f"‚ùå Error en test de conexi√≥n: {e}")
            return False
    
    def create_database(self):
        """Crear la base de datos si no existe"""
        try:
            # Conectar sin especificar base de datos
            config_without_db = self.DB_CONFIG.copy()
            config_without_db.pop('database', None)
            
            connection = mysql.connector.connect(**config_without_db)
            if connection.is_connected():
                cursor = connection.cursor()
                
                # Crear base de datos si no existe
                cursor.execute("CREATE DATABASE IF NOT EXISTS modustackclean CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci")
                print("‚úÖ Base de datos 'modustackclean' creada/verificada")
                
                connection.commit()
                cursor.close()
                connection.close()
                return True
            return False
        except Error as e:
            print(f"‚ùå Error creando base de datos: {e}")
            return False
    
    def create_tables(self):
        """Crear las tablas necesarias"""
        try:
            # Primero crear la base de datos si no existe
            if not self.create_database():
                return False
            
            # Luego conectar a la base de datos espec√≠fica
            connection = self.get_connection()
            if connection:
                cursor = connection.cursor()
                
                # Crear tabla usuarios
                create_usuarios_table = """
                CREATE TABLE IF NOT EXISTS usuarios (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    nombre VARCHAR(100) NOT NULL,
                    correo VARCHAR(150) UNIQUE NOT NULL,
                    password VARCHAR(255) NOT NULL,
                    rol ENUM('admin', 'usuario') DEFAULT 'usuario',
                    estado TINYINT(1) DEFAULT 1,
                    creado_en TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    actualizado_en TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
                """
                
                cursor.execute(create_usuarios_table)
                print("‚úÖ Tabla 'usuarios' creada/verificada correctamente")
                
                connection.commit()
                cursor.close()
                connection.close()
                return True
            return False
        except Error as e:
            print(f"‚ùå Error creando tablas: {e}")
            return False
    
    def get_connection_info(self):
        """Obtener informaci√≥n de la configuraci√≥n de conexi√≥n"""
        return {
            'host': self.DB_CONFIG['host'],
            'database': self.DB_CONFIG['database'],
            'user': self.DB_CONFIG['user'],
            'port': 3306,
            'timeout': self.DB_CONFIG['connect_timeout']
        }
