#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de prueba para ModuStackClean Flet App
Verifica que todos los componentes funcionen correctamente
"""

import sys
import os

def test_imports():
    """Probar que todos los m√≥dulos se pueden importar"""
    print("üîç Probando importaciones...")
    
    try:
        import flet as ft
        print("‚úÖ Flet importado correctamente")
    except ImportError as e:
        print(f"‚ùå Error importando Flet: {e}")
        return False
    
    try:
        from config.app_config import AppConfig
        print("‚úÖ AppConfig importado correctamente")
    except ImportError as e:
        print(f"‚ùå Error importando AppConfig: {e}")
        return False
    
    try:
        from views.home_view import HomeView
        print("‚úÖ HomeView importado correctamente")
    except Exception as e:
        print(f"‚ùå Error importando HomeView: {e}")
        return False
    
    try:
        from utils.ui_components import create_gradient_container, create_feature_card
        print("‚úÖ UI Components importados correctamente")
    except ImportError as e:
        print(f"‚ùå Error importando UI Components: {e}")
        return False
    
    return True

def test_config():
    """Probar la configuraci√≥n de la aplicaci√≥n"""
    print("\n‚öôÔ∏è Probando configuraci√≥n...")
    
    try:
        from config.app_config import AppConfig
        config = AppConfig()
        
        # Verificar informaci√≥n b√°sica
        assert config.APP_TITLE == "ModuStackClean", "T√≠tulo incorrecto"
        assert config.APP_VERSION == "1.0", "Versi√≥n incorrecta"
        assert "RuloSoluciones" in config.COPYRIGHT, "Copyright incorrecto"
        
        print("‚úÖ Configuraci√≥n b√°sica correcta")
        
        # Verificar caracter√≠sticas
        assert len(config.FEATURES) == 4, "N√∫mero incorrecto de caracter√≠sticas"
        print("‚úÖ Caracter√≠sticas configuradas correctamente")
        
        # Verificar colores
        assert config.PRIMARY_COLOR.startswith("#"), "Color primario incorrecto"
        print("‚úÖ Colores configurados correctamente")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en configuraci√≥n: {e}")
        return False

def test_ui_components():
    """Probar los componentes de UI"""
    print("\nüé® Probando componentes de UI...")
    
    try:
        from utils.ui_components import create_gradient_container, create_feature_card
        from config.app_config import AppConfig
        
        config = AppConfig()
        
        # Probar creaci√≥n de contenedor con gradiente
        container = create_gradient_container("Test")
        assert container is not None, "Error creando contenedor con gradiente"
        print("‚úÖ Contenedor con gradiente creado correctamente")
        
        # Probar creaci√≥n de tarjeta de caracter√≠stica
        card = create_feature_card("üìÅ", "Test", "Descripci√≥n", config)
        assert card is not None, "Error creando tarjeta de caracter√≠stica"
        print("‚úÖ Tarjeta de caracter√≠stica creada correctamente")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en componentes de UI: {e}")
        return False

def main():
    """Funci√≥n principal de pruebas"""
    print("üöÄ Pruebas de ModuStackClean Flet App")
    print("=" * 50)
    
    # Cambiar al directorio de la aplicaci√≥n
    script_dir = os.path.dirname(os.path.abspath(__file__))
    os.chdir(script_dir)
    
    print(f"üìÇ Directorio de trabajo: {os.getcwd()}")
    
    # Ejecutar pruebas
    tests = [
        test_imports,
        test_config,
        test_ui_components
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
    
    print("\n" + "=" * 50)
    print("üìã RESULTADOS DE PRUEBAS")
    print("=" * 50)
    
    if passed == total:
        print(f"‚úÖ Todas las pruebas pasaron ({passed}/{total})")
        print("üéâ La aplicaci√≥n est√° lista para usar")
        print("\nüí° Para ejecutar la aplicaci√≥n:")
        print("   python main.py")
        print("   o")
        print("   install.bat")
        return True
    else:
        print(f"‚ùå {total - passed} pruebas fallaron ({passed}/{total})")
        print("‚ö†Ô∏è  Revisa los errores antes de ejecutar la aplicaci√≥n")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
